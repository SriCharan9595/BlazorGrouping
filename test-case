
[HttpPost("GetCashSummary")]
        [Produces("application/json")]
        public async Task<IActionResult> Get( LazyLoadRequest lazyLoadRequest )
        {
            if (lazyLoadRequest?.PageSize > 0 && lazyLoadRequest?.Skip != null)
            {
                var result = await _cashSummaryServices.GetCashSummary(lazyLoadRequest);
                return Ok(result);
            }
            else
            {
                throw new Exception($"Request Params, Pagesize should be greater than 0 or Skip Should not be null");
            }
        }


public async Task <DataEnvelope<CashSummary>> GetCashSummary( LazyLoadRequest lazyLoadRequest )
        {
            _logger.LogInformation("Retrieving GetCashSummary Informations");

            DataEnvelope<CashSummary> dataToReturn;

            var cashSummarries = await _cashSummaryRepository.GetCashSummary(SQLConstants.GET_CASH_SUMMARY_DETAILS, lazyLoadRequest);

            var CashSummaryList = (from cs in cashSummarries
                                         where cs.Account != null && cs.Account.ToLower().Contains(lazyLoadRequest.PortfolioValue.ToLower())
                                         select cs).ToList();

            if(CashSummaryList.Any() == true)
            {
                var processedData = await CashSummaryList.AsQueryable().ToDataSourceResultAsync(lazyLoadRequest);

                if (lazyLoadRequest.Groups?.Any() == true)
                {
                    dataToReturn = new DataEnvelope<CashSummary>
                    {
                        GroupedData = processedData.Data.Cast<AggregateFunctionsGroup>().ToList(),
                        TotalItemCount = processedData.Total
                    };
                }
                else
                {
                    dataToReturn = new DataEnvelope<CashSummary>
                    {
                        CurrentPageData = processedData.Data.Cast<CashSummary>().ToList(),
                        TotalItemCount = processedData.Total
                    };
                }

                return dataToReturn;
            }
            else
            {
                return null;
            }
        }
        
        
        public class LazyLoadRequest: DataSourceRequest
    {
        public string? PortfolioType { get; set; }
        public string? PortfolioValue { get; set; }
        public string? UserName { get; set; }
    }
    
    
    using Xunit;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Moq;

public class CashSummaryControllerTests
{
    [Fact]
    public async Task Get_Returns200StatusCode()
    {
        // Arrange
        var mockServices = new Mock<ICashSummaryServices>();
        var lazyLoadRequest = new LazyLoadRequest { PageSize = 10, Skip = 0 };
        mockServices.Setup(s => s.GetCashSummary(lazyLoadRequest)).ReturnsAsync(new DataEnvelope<CashSummary>());

        var controller = new CashSummaryController(mockServices.Object);
        controller.ControllerContext.HttpContext = new DefaultHttpContext();

        // Act
        var result = await controller.Get(lazyLoadRequest);

        // Assert
        Assert.IsType<OkObjectResult>(result);
        Assert.Equal((int)HttpStatusCode.OK, (result as OkObjectResult)?.StatusCode);
    }
}



using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Moq;
using MyNamespace.Controllers;
using MyNamespace.Models;
using MyNamespace.Services;
using Xunit;

namespace MyNamespace.Tests.Controllers
{
    public class CashSummaryControllerTests
    {
        [Fact]
        public async Task GetCashSummary_WithValidRequest_ReturnsOkResultWithDataEnvelope()
        {
            // Arrange
            var mockServices = new Mock<ICashSummaryServices>();
            var lazyLoadRequest = new LazyLoadRequest
            {
                PageSize = 10,
                Skip = 0,
                PortfolioValue = "myportfolio",
                // Add any other properties needed for your test
            };
            var mockDataEnvelope = new DataEnvelope<CashSummary>
            {
                CurrentPageData = new[] { new CashSummary { /* Add properties as needed */ } },
                TotalItemCount = 1
            };
            mockServices.Setup(s => s.GetCashSummary(lazyLoadRequest)).ReturnsAsync(mockDataEnvelope);
            var controller = new CashSummaryController(mockServices.Object);

            // Act
            var result = await controller.Get(lazyLoadRequest);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            var dataEnvelope = Assert.IsType<DataEnvelope<CashSummary>>(okResult.Value);
            Assert.Equal(mockDataEnvelope.CurrentPageData.Length, dataEnvelope.CurrentPageData.Count);
            Assert.Equal(mockDataEnvelope.TotalItemCount, dataEnvelope.TotalItemCount);
        }

        [Fact]
        public async Task GetCashSummary_WithInvalidRequest_ThrowsException()
        {
            // Arrange
            var mockServices = new Mock<ICashSummaryServices>();
            var lazyLoadRequest = new LazyLoadRequest(); // Missing required properties
            var controller = new CashSummaryController(mockServices.Object);

            // Act & Assert
            await Assert.ThrowsAsync<Exception>(() => controller.Get(lazyLoadRequest));
        }
    }
}


public class DataEnvelope<T>
    {
        public List<AggregateFunctionsGroup> GroupedData { get; set; }

        public List<T> CurrentPageData { get; set; }

        public int TotalItemCount { get; set; }
    }

{
                EffectiveDate = null,
                Account = "SRICHARAN",
                CashType = "CREDIT",
                Ticker = "USD CURRENCY",
                LotID = "SRI\\CHARAN\\K\\\\",
                SecurityName = "US DOLLAR",
                MarketValue = 9595,
                CUSIP = null,
                ISIN = "IND954619",
                SEDOL = "14E31S07",
                Issuer = "US DOLLAR",
                SecurityTypeID = "247",
                SecurityType = "Other",
                SecuritySubtype = null,
                CountryCD = "US",
                SecurityCurrency = "USD",
                AccountName = "SK CORPORATE SOLUTIONS",
                MaturityDate = null,
                SettlementDate = null,
                BuySell = null,
                TradePrice = null,
                TradeQuantity = null,
                TradeID = null,
                TransCD = null,
                Buyer = null,
                Seller = null,
                LongShort = null,
                SettlementAmt = null,
                SettlementExchRate = null,
                SettlementCurrency = null,
                RealizedPL = null,
                Broker = null,
                TradeStatus = null,
                AcqTotalCostLocal = null,
                CommissionAmtLocal = null,
                SECFees = null,
                OtherFee = null
            };
