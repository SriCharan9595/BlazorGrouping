using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Moq;
using PIMDataStore.API.Controllers;
using PIMDataStore.API.Models.Dto;
using PIMDataStore.API.Services;
using PIMDataStore.Core.Logger;
using System.Net;
using Xunit;

namespace PIMDataStore.API.Tests.Controllers
{
    public class CashSummaryControllerTests
    {
        [Fact]
        public async Task GetValuesOfCashSummary_ShouldReturn200Status()
        {
            // Arrange
            var lookUpParameters = new LookUpParameters {
                Type = "sch_core_data.VW_ACCOUNT",
                ItemType = "ACCOUNT_IDENTIFIER",
                ItemValue = "s",
                IncludeValue = "10",
                NumericOrder = "%"
            };

            var mockService = new Mock<ICashSummaryServices>();
            var mockAuthService = new Mock<IApplicationServices>();
            var mockLogger = new Mock<ILogger<CashSummaryController>>();
            mockService.Setup(s => s.GetValues(lookUpParameters)).ReturnsAsync(new List<string>());
            var controller = new CashSummaryController(mockLogger.Object, mockService.Object, mockAuthService.Object);

            // Act
            var result = await controller.GetValuesOfCashSummary(lookUpParameters);
            var okResult = result as OkObjectResult;

            // Assert
            Assert.IsType<OkObjectResult>(result);
            Assert.Equal(200, okResult.StatusCode);
        }

        [Fact]
        public async Task GetValuesOfCashSummary_ShouldReturnValidResponse()
        {
            // Arrange
            var cashSummaryQuery = new LookUpParameters
            {
                Type = "sch_core_data.VW_ACCOUNT",
                ItemType = "ACCOUNT_IDENTIFIER",
                ItemValue = "v",
                IncludeValue = "10",
                NumericOrder = "%"
            };
            var expectedValues = new List<string> { "VACS_EM", "VACS_INT", "VACS_L" };

            var mockService = new Mock<ICashSummaryServices>();
            var mockAuthService = new Mock<IApplicationServices>();

            var mockLogger = new Mock<ILogger<CashSummaryController>>();

            mockService.Setup(s => s.GetValues(cashSummaryQuery)).ReturnsAsync(expectedValues);

            var controller = new CashSummaryController(mockLogger.Object, mockService.Object, mockAuthService.Object);

            // Act
            var result = await controller.GetValuesOfCashSummary(cashSummaryQuery);

            var okResult = result as OkObjectResult;
            var actualValues = okResult.Value as List<string>;

            // Assert
            Assert.NotNull(result);
            Assert.IsType<OkObjectResult>(result);
            Assert.Equal(expectedValues, actualValues);
        }

        [Fact]
        public async Task GetCashSummary_ShouldReturn200Status()
        {
            // Arrange
            var mockService = new Mock<ICashSummaryServices>();
            var mockLogger = new Mock<ILogger<CashSummaryController>>();

            var lazyLoadRequest = new LazyLoadRequest {
                PageSize = 10,
                Skip = 0,
                PortfolioType = "Name",
                PortfolioValue = "cs",
                UserName = "SriCharan"
            };

            mockService.Setup(s => s.GetCashSummary(lazyLoadRequest)).ReturnsAsync(new DataEnvelope<CashSummary>());

            var controller = new CashSummaryController(mockLogger.Object, mockService.Object);

            // Act
            var result = await controller.Get(lazyLoadRequest);

            // Assert
            Assert.NotNull(result);
            Assert.IsType<OkObjectResult>(result);
            Assert.Equal((int)HttpStatusCode.OK, (result as OkObjectResult)?.StatusCode);
        }

        [Fact]
        public async Task GetCashSummary_WithValidRequest_ReturnsOkResultWithDataEnvelope()
        {
            // Arrange
            var mockService = new Mock<ICashSummaryServices>();
            var mockLogger = new Mock<ILogger<CashSummaryController>>();

            var lazyLoadRequest = new LazyLoadRequest
            {
                PageSize = 10,
                Skip = 0,
                PortfolioType = "Name",
                PortfolioValue = "cs",
                UserName = "SriCharan"
            };

            var mockDataEnvelope = new DataEnvelope<CashSummary>
            {
                CurrentPageData = new[] { new CashSummary { /* Add properties as needed */ } },
                TotalItemCount = 1
            };
            mockService.Setup(s => s.GetCashSummary(lazyLoadRequest)).ReturnsAsync(mockDataEnvelope);
            var controller = new CashSummaryController(mockLogger.Object, mockService.Object);

            // Act
            var result = await controller.Get(lazyLoadRequest);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            var dataEnvelope = Assert.IsType<DataEnvelope<CashSummary>>(okResult.Value);
            Assert.Equal(mockDataEnvelope.CurrentPageData.Length, dataEnvelope.CurrentPageData.Count);
            Assert.Equal(mockDataEnvelope.TotalItemCount, dataEnvelope.TotalItemCount);
        }

        [Fact]
        public async Task GetCashSummary_WithInvalidRequest_ThrowsException()
        {
            // Arrange
            var mockService = new Mock<ICashSummaryServices>();
            var mockLogger = new Mock<ILogger<CashSummaryController>>();

            var lazyLoadRequest = new LazyLoadRequest();

            var controller = new CashSummaryController(mockLogger.Object, mockService.Object);

            // Act & Assert
            await Assert.ThrowsAsync<Exception>(() => controller.Get(lazyLoadRequest));
        }
    }
}









using PIMDataStore.API.Models.Dto;

namespace PIMDataStore.API.Tests.MockData
{
    internal class MockCashSummary
    {
        public List<CashSummary> GetMockCashSummary()
        {
            return new List<CashSummary()
            {
                EffectiveDate = null,
                Account = "SRICHARAN",
                CashType = "CREDIT",
                Ticker = "USD CURRENCY",
                LotID = "SRI\\CHARAN\\K\\\\",
                SecurityName = "US DOLLAR",
                MarketValue = 9595,
                CUSIP = null,
                ISIN = "IND954619",
                SEDOL = "14E31S07",
                Issuer = "US DOLLAR",
                SecurityTypeID = "247",
                SecurityType = "Other",
                SecuritySubtype = null,
                CountryCD = "US",
                SecurityCurrency = "USD",
                AccountName = "SK CORPORATE SOLUTIONS",
                MaturityDate = null,
                SettlementDate = null,
                BuySell = null,
                TradePrice = null,
                TradeQuantity = null,
                TradeID = null,
                TransCD = null,
                Buyer = null,
                Seller = null,
                LongShort = null,
                SettlementAmt = null,
                SettlementExchRate = null,
                SettlementCurrency = null,
                RealizedPL = null,
                Broker = null,
                TradeStatus = null,
                AcqTotalCostLocal = null,
                CommissionAmtLocal = null,
                SECFees = null,
                OtherFee = null
            };
        }
    }
}
